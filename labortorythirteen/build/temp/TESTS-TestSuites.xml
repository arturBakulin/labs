<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
  <testsuite errors="0" failures="0" hostname="Grigoriys-MBP.nixsolutions.com" id="0" name="JdbcRoleDaoImplTest" package="com.nixsolutions.laboratorythirteen.jdbc" skipped="0" tests="10" time="0.765" timestamp="2017-07-21T09:54:13">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.eclipse.pde.build_3.9.200.v20160204-0642/templates//" />

          <property name="checkstyle.dir" value="lib/checkstyle-7.8-all.jar" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/classes" />

          <property name="user.country.format" value="UA" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="net.sourceforge.cobertura.datafile" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/temp/cobertura.ser" />

          <property name="ant.home" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327" />

          <property name="java.runtime.version" value="1.8.0_131-b11" />

          <property name="test.build.dir" value="build/tests" />

          <property name="cobertura.dir" value="lib/cobertura-2.1.1" />

          <property name="user.name" value="grigoriy" />

          <property name="ant.file.laboratorythirteen" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build.xml" />

          <property name="user.language" value="en" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib" />

          <property name="report.findbugs.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/reports/findbugs" />

          <property name="ant.project.name" value="laboratorythirteen" />

          <property name="java.version" value="1.8.0_131" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="test.src.dir" value="src/test/java/com/nixsolutions/laboratorythirteen/jdbc" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="52.0" />

          <property name="user.country" value="US" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build.xml" />

          <property name="os.version" value="10.12.5" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="25.131-b11" />

          <property name="ant.library.dir" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib" />

          <property name="main.src.dir.entity" value="src/main/java/com/nixsolutions/laboratorythirteen/entity" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="ant.file.type.laboratorythirteen" value="file" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="report.temp.dir" value="build/temp" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="findbugs.dir" value="lib/findbugs-3.0.1" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.eclipse.pde.build_3.9.200.v20160204-0642/scripts//" />

          <property name="user.home" value="/Users/grigoriy" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="main.src.dir.dao.jdbc" value="src/main/java/com/nixsolutions/laboratorythirteen/dao/jdbc" />

          <property name="junit.dir" value="lib/junit-4.12.jar" />

          <property name="java.library.path" value="/Users/grigoriy/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="pmd.dir" value="lib/pmd-bin-5.7.0" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="main.src.dir.dao" value="src/main/java/com/nixsolutions/laboratorythirteen/dao" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest skipNonTests=false filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true threadid=0 logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.PlainJUnitResultFormatter,/Users/grigoriy/Documents/workspace/labortorythirteen/build/temp/TEST-com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest.txt formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/grigoriy/Documents/workspace/labortorythirteen/build/temp/TEST-com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest.xml crashfile=/Users/grigoriy/Documents/workspace/labortorythirteen/junitvmwatcher5754104502741867008.properties propsfile=/Users/grigoriy/Documents/workspace/labortorythirteen/junit8342412605428291688.properties" />

          <property name="java.class.path" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/instrumented:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/junit-4.12.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/hamcrest-core-1.3.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/dbunit-2.5.3.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/h2-1.4.196.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/commons-dbcp2-2.1.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/commons-pool2-2.4.2.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/commons-logging-1.2.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/build/classes:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/cobertura-2.1.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-analysis-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-commons-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-tree-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-util-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/commons-lang3-3.3.2.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/hamcrest-core-1.3.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/jaxen-1.1.4.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/jetty-6.1.14.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/jetty-util-6.1.14.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/junit-4.11.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/logback-classic-1.0.13.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/logback-core-1.0.13.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/oro-2.0.8.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/servlet-api-2.5-6.1.14.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/slf4j-api-1.7.5.jar:/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant-launcher.jar:/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant.jar:/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant-junit.jar:/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.6 compiled on June 29 2015" />

          <property name="report.junit.dir" value="build/reports/junit" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.8" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="java.io.tmpdir" value="/var/folders/tp/192c_fzd66db2g8bvfn_mks80000gn/T/" />

          <property name="eclipse.pdebuild.home" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.eclipse.pde.build_3.9.200.v20160204-0642/.//" />

          <property name="instrumented.test.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/instrumented/com/nixsolutions/laboratorythirteen/jdbc" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="instrumented.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/instrumented" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="cobertura.ser.file" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/temp/cobertura.ser" />

          <property name="java.ext.dirs" value="/Users/grigoriy/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="basedir" value="/Users/grigoriy/Documents/workspace/labortorythirteen" />

          <property name="report.pmd.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/reports/pmd" />

          <property name="ant.java.version" value="1.8" />

          <property name="ant.core.lib" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant.jar" />

          <property name="report.cobertura.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/reports/cobertura" />

          <property name="main.build.dir" value="build/classes" />

          <property name="file.encoding" value="UTF-8" />

          <property name="report.checkstyle.dir" value="build/reports/checkstyle" />

          <property name="java.specification.version" value="1.8" />

          <property name="ant.project.invoked-targets" value="all" />

      </properties>

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="createRoleNullTest" time="0.253" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="findRoleByNameTest" time="0.025" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="findRoleByNameNoSuchRoleTest" time="0.022" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="updateRoleNullTest" time="0.015" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="findRoleByNameNullTest" time="0.016" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="updateRoleNoSuchRoleTest" time="0.018" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="deleteNullTest" time="0.016" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="updateRoleTest" time="0.044" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="createRoleTest" time="0.03" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcRoleDaoImplTest" name="deleteRoleTest" time="0.028" />

      <system-out><![CDATA[[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@701fc37a, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@4148db48) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@701fc37a, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@4148db48) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@282003e1) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@282003e1) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@282003e1) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@282003e1) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs1: org.h2.result.LocalResult@12d4bf7e columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs3: org.h2.result.LocalResult@7219ec67 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep5: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep5: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep5: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep5: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@add0edd, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@4facf68f, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@76508ed1) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@4facf68f, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@76508ed1) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@41e36e46) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@41e36e46) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@41e36e46) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@41e36e46) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs9: org.h2.result.LocalResult@3d51f06e columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs11: org.h2.result.LocalResult@7ed7259e columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep12: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep12: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep12: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep12: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn4: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@481a996b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@708f5957, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@68999068) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@708f5957, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@68999068) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7722c3c3) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7722c3c3) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7722c3c3) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7722c3c3) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs18: org.h2.result.LocalResult@20deea7f columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs20: org.h2.result.LocalResult@3835c46 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep19: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep19: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep19: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep19: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn7: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7193666c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@192d43ce, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@72057ecf) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@192d43ce, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@72057ecf) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1afd44cb) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1afd44cb) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1afd44cb) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1afd44cb) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs27: org.h2.result.LocalResult@123ef382 columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs29: org.h2.result.LocalResult@dbf57b3 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep26: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep26: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep26: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep26: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn10: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@f5ac9e4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@52e6fdee, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6c80d78a) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@52e6fdee, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6c80d78a) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@62150f9e) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@62150f9e) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@62150f9e) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@62150f9e) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs35: org.h2.result.LocalResult@158da8e columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs37: org.h2.result.LocalResult@74e52303 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep33: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep33: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep33: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep33: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn13: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6aba2b86, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[ERROR] NullPointerException. There is no such role name!
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@5af3afd9, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@323b36e0) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@5af3afd9, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@323b36e0) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@44ebcd03) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@44ebcd03) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@44ebcd03) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@44ebcd03) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs43: org.h2.result.LocalResult@3e58a80e columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs45: org.h2.result.LocalResult@4fb61f4a columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep39: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep39: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep39: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep39: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6b927fb, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[ERROR] IllegalArgumentException.There is no such role to update!
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@9f116cc, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@12468a38) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@9f116cc, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@12468a38) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1aa7ecca) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1aa7ecca) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1aa7ecca) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1aa7ecca) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs52: org.h2.result.LocalResult@245b4bdc columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs54: org.h2.result.LocalResult@6c64cb25 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep46: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep46: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep46: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep46: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@dd8ba08, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@399f45b1, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@38c6f217) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@399f45b1, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@38c6f217) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@478190fc) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@478190fc) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@478190fc) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@478190fc) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs60: org.h2.result.LocalResult@8f4ea7c columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs62: org.h2.result.LocalResult@436813f3 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep53: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep53: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep53: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep53: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@223d2c72, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@131774fe, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@158d2680) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@131774fe, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@158d2680) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@77847718) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@77847718) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@77847718) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@77847718) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] createDataSet() - start
[DEBUG] assertEqualsIgnoreCols(expectedDataset=AbstractDataSet[_orderedTableNameMap=null], actualDataset=AbstractDataSet[_orderedTableNameMap=null], tableName=ROLE, ignoreCols=[id]) - start
[DEBUG] getTable(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs69: org.h2.result.LocalResult@6069db50 columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4efbca5a, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs71: org.h2.result.LocalResult@1b7cc17c columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] Statement fetch size set to 100
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getSelectStatement(schema=null, metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], escapePattern=null) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] Query: select ID_ROLE, NAME from ROLE
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]], _resultSet=[rs74: org.h2.result.LocalResult@55183b20 columns: 2 rows: 2 pos: -1], _statement=[stat9]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
[DEBUG] getColumns() - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs74: org.h2.result.LocalResult@55183b20 columns: 2 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs74: org.h2.result.LocalResult@55183b20 columns: 2 rows: 2 pos: 0) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs74: org.h2.result.LocalResult@55183b20 columns: 2 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs74: org.h2.result.LocalResult@55183b20 columns: 2 rows: 2 pos: 1) - start
[DEBUG] getValue(row=2, columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=2], ignoreCols=[id]) - start
[DEBUG] excludedColumnsTable(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=ROLE, column=(ID_ROLE, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] accept(tableName=ROLE, column=(NAME, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=NAME) - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=2], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getColumns() - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=ROLE, column=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] accept(tableName=ROLE, column=(NAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=NAME) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=2]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=2], additionalColumnInfo=null) - start
[DEBUG] assertEquals: expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=2]
[DEBUG] assertEquals: failureHandler=null
[DEBUG] FailureHandler is null. Using default implementation
[DEBUG] getTableMetaData() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getRowCount() - start
[DEBUG] getRowCount() - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@3c19aaa5) - start
[DEBUG] compare(o1=(NAME, UNKNOWN, nullableUnknown), o2=(ID_ROLE, UNKNOWN, nullableUnknown)) - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@3349e9bb) - start
[DEBUG] compare(o1=(NAME, VARCHAR, nullable), o2=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@3c19aaa5, columnsToSearch=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)])
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@3349e9bb, columnsToSearch=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)])
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getComparisonDataType(tableName=ROLE, expectedColumn=(ID_ROLE, UNKNOWN, nullableUnknown), actualColumn=(ID_ROLE, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=ROLE, expectedColumn=(NAME, UNKNOWN, nullableUnknown), actualColumn=(NAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] compareData(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@689604d9, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@18078bef], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=1, o2=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] compareNonNulls(value1=1, value2=1) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] compare(o1=Doe, o2=Doe) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=2, o2=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] compareNonNulls(value1=2, value2=2) - start
[DEBUG] getValue(row=1, columnName=NAME) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, columnName=NAME) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] compare(o1=Anonimus, o2=Anonimus) - start
[DEBUG] getRowCount() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@145f66e3, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@3023df74) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@145f66e3, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@3023df74) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@313ac989) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@313ac989) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@313ac989) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@313ac989) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs75: org.h2.result.LocalResult@7c7b252e columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs77: org.h2.result.LocalResult@4d5d943d columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep66: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep66: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep66: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep66: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7cc0cdad, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@48f2bd5b, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@7b2bbc3) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@48f2bd5b, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@7b2bbc3) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@a1153bc) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@a1153bc) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@a1153bc) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@a1153bc) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@a1153bc) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=3) - start
[DEBUG] addRow(values=3) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]}, _caseSensitiveTableNames=false]
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] createDataSet() - start
[DEBUG] assertEqualsIgnoreCols(expectedDataset=AbstractDataSet[_orderedTableNameMap=null], actualDataset=AbstractDataSet[_orderedTableNameMap=null], tableName=ROLE, ignoreCols=[id]) - start
[DEBUG] getTable(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs83: org.h2.result.LocalResult@14cd1699 columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77888435, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs85: org.h2.result.LocalResult@73a1e9a9 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] Statement fetch size set to 100
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getSelectStatement(schema=null, metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], escapePattern=null) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] Query: select ID_ROLE, NAME from ROLE
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]], _resultSet=[rs88: org.h2.result.LocalResult@4802796d columns: 2 rows: 3 pos: -1], _statement=[stat11]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
[DEBUG] getColumns() - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs88: org.h2.result.LocalResult@4802796d columns: 2 rows: 3 pos: 0) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs88: org.h2.result.LocalResult@4802796d columns: 2 rows: 3 pos: 0) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs88: org.h2.result.LocalResult@4802796d columns: 2 rows: 3 pos: 1) - start
[DEBUG] getValue(row=1, columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs88: org.h2.result.LocalResult@4802796d columns: 2 rows: 3 pos: 1) - start
[DEBUG] getValue(row=2, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs88: org.h2.result.LocalResult@4802796d columns: 2 rows: 3 pos: 2) - start
[DEBUG] getValue(row=2, columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs88: org.h2.result.LocalResult@4802796d columns: 2 rows: 3 pos: 2) - start
[DEBUG] getValue(row=3, columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=3], ignoreCols=[id]) - start
[DEBUG] excludedColumnsTable(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=ROLE, column=(ID_ROLE, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] accept(tableName=ROLE, column=(NAME, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=NAME) - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=3], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getColumns() - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=ROLE, column=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] accept(tableName=ROLE, column=(NAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=NAME) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=3]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=3], additionalColumnInfo=null) - start
[DEBUG] assertEquals: expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=3]
[DEBUG] assertEquals: failureHandler=null
[DEBUG] FailureHandler is null. Using default implementation
[DEBUG] getTableMetaData() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getRowCount() - start
[DEBUG] getRowCount() - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@59474f18) - start
[DEBUG] compare(o1=(NAME, UNKNOWN, nullableUnknown), o2=(ID_ROLE, UNKNOWN, nullableUnknown)) - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@65fb9ffc) - start
[DEBUG] compare(o1=(NAME, VARCHAR, nullable), o2=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@59474f18, columnsToSearch=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)])
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@65fb9ffc, columnsToSearch=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)])
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getComparisonDataType(tableName=ROLE, expectedColumn=(ID_ROLE, UNKNOWN, nullableUnknown), actualColumn=(ID_ROLE, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=ROLE, expectedColumn=(NAME, UNKNOWN, nullableUnknown), actualColumn=(NAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] compareData(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@41d477ed, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3590fc5b], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=1, o2=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] compareNonNulls(value1=1, value2=1) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] compare(o1=Doe, o2=Doe) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=2, o2=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] compareNonNulls(value1=2, value2=2) - start
[DEBUG] getValue(row=1, columnName=NAME) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, columnName=NAME) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] compare(o1=Foo, o2=Foo) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=2, columnName=ID_ROLE) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=2, columnName=ID_ROLE) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=3, o2=3) - start
[DEBUG] typeCast(value=3) - start
[DEBUG] typeCast(value=3) - start
[DEBUG] compareNonNulls(value1=3, value2=3) - start
[DEBUG] getValue(row=2, columnName=NAME) - start
[DEBUG] getValue(row=2, column=NAME) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=2, columnName=NAME) - start
[DEBUG] getValue(row=2, column=NAME) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] compare(o1=Registred, o2=Registred) - start
[DEBUG] getRowCount() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@515c6049, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@639c2c1d) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@515c6049, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@639c2c1d) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5fe94a96) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5fe94a96) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5fe94a96) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5fe94a96) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@5af97850, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@5ef60048]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs89: org.h2.result.LocalResult@36fc695d columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs91: org.h2.result.LocalResult@28701274 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep78: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=2, statement=prep78: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep78: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Doe'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=2, statement=prep78: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Doe'}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@2b71e916, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@4afcd809, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@175c2241) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@4afcd809, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@175c2241) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5bf0d49) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5bf0d49) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5bf0d49) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]}, _caseSensitiveTableNames=false]
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] createDataSet() - start
[DEBUG] assertEqualsIgnoreCols(expectedDataset=AbstractDataSet[_orderedTableNameMap=null], actualDataset=AbstractDataSet[_orderedTableNameMap=null], tableName=ROLE, ignoreCols=[id]) - start
[DEBUG] getTable(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs97: org.h2.result.LocalResult@6c6cb480 columns: 11 rows: 1 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@527e5409, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@1198b989, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@7ff95560], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3c46e67a, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@2aa3cd93, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs99: org.h2.result.LocalResult@c730b35 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] Statement fetch size set to 100
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getSelectStatement(schema=null, metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], escapePattern=null) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] Query: select ID_ROLE, NAME from ROLE
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]], _resultSet=[rs102: org.h2.result.LocalResult@22555ebf columns: 2 rows: 1 pos: -1], _statement=[stat13]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
[DEBUG] getColumns() - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs102: org.h2.result.LocalResult@22555ebf columns: 2 rows: 1 pos: 0) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs102: org.h2.result.LocalResult@22555ebf columns: 2 rows: 1 pos: 0) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=1], ignoreCols=[id]) - start
[DEBUG] excludedColumnsTable(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=ROLE, column=(ID_ROLE, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] accept(tableName=ROLE, column=(NAME, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=NAME) - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=1], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getColumns() - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=ROLE, column=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] accept(tableName=ROLE, column=(NAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=NAME) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getFilteredColumns(tableName=ROLE, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=1]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=1], additionalColumnInfo=null) - start
[DEBUG] assertEquals: expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=1]
[DEBUG] assertEquals: failureHandler=null
[DEBUG] FailureHandler is null. Using default implementation
[DEBUG] getTableMetaData() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getRowCount() - start
[DEBUG] getRowCount() - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@45752059) - start
[DEBUG] compare(o1=(NAME, UNKNOWN, nullableUnknown), o2=(ID_ROLE, UNKNOWN, nullableUnknown)) - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@34e9fd99) - start
[DEBUG] compare(o1=(NAME, VARCHAR, nullable), o2=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@45752059, columnsToSearch=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)])
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@34e9fd99, columnsToSearch=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)])
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getComparisonDataType(tableName=ROLE, expectedColumn=(ID_ROLE, UNKNOWN, nullableUnknown), actualColumn=(ID_ROLE, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=ROLE, expectedColumn=(NAME, UNKNOWN, nullableUnknown), actualColumn=(NAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] compareData(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@43bc63a3, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@702657cc], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=2, o2=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] compareNonNulls(value1=2, value2=2) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=0, columnName=NAME) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] compare(o1=Foo, o2=Foo) - start
[DEBUG] getRowCount() - start
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="Grigoriys-MBP.nixsolutions.com" id="1" name="JdbcUserDaoImplTest" package="com.nixsolutions.laboratorythirteen.jdbc" skipped="0" tests="14" time="0.796" timestamp="2017-07-21T09:54:15">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.eclipse.pde.build_3.9.200.v20160204-0642/templates//" />

          <property name="checkstyle.dir" value="lib/checkstyle-7.8-all.jar" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/classes" />

          <property name="user.country.format" value="UA" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="net.sourceforge.cobertura.datafile" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/temp/cobertura.ser" />

          <property name="ant.home" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327" />

          <property name="java.runtime.version" value="1.8.0_131-b11" />

          <property name="test.build.dir" value="build/tests" />

          <property name="cobertura.dir" value="lib/cobertura-2.1.1" />

          <property name="user.name" value="grigoriy" />

          <property name="ant.file.laboratorythirteen" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build.xml" />

          <property name="user.language" value="en" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib" />

          <property name="report.findbugs.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/reports/findbugs" />

          <property name="ant.project.name" value="laboratorythirteen" />

          <property name="java.version" value="1.8.0_131" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="test.src.dir" value="src/test/java/com/nixsolutions/laboratorythirteen/jdbc" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="52.0" />

          <property name="user.country" value="US" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build.xml" />

          <property name="os.version" value="10.12.5" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="25.131-b11" />

          <property name="ant.library.dir" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib" />

          <property name="main.src.dir.entity" value="src/main/java/com/nixsolutions/laboratorythirteen/entity" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="ant.file.type.laboratorythirteen" value="file" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="report.temp.dir" value="build/temp" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="findbugs.dir" value="lib/findbugs-3.0.1" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.eclipse.pde.build_3.9.200.v20160204-0642/scripts//" />

          <property name="user.home" value="/Users/grigoriy" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="main.src.dir.dao.jdbc" value="src/main/java/com/nixsolutions/laboratorythirteen/dao/jdbc" />

          <property name="junit.dir" value="lib/junit-4.12.jar" />

          <property name="java.library.path" value="/Users/grigoriy/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="pmd.dir" value="lib/pmd-bin-5.7.0" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="main.src.dir.dao" value="src/main/java/com/nixsolutions/laboratorythirteen/dao" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest skipNonTests=false filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true threadid=0 logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.PlainJUnitResultFormatter,/Users/grigoriy/Documents/workspace/labortorythirteen/build/temp/TEST-com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest.txt formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/grigoriy/Documents/workspace/labortorythirteen/build/temp/TEST-com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest.xml crashfile=/Users/grigoriy/Documents/workspace/labortorythirteen/junitvmwatcher5054669739807915795.properties propsfile=/Users/grigoriy/Documents/workspace/labortorythirteen/junit2057701342854182472.properties" />

          <property name="java.class.path" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/instrumented:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/junit-4.12.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/hamcrest-core-1.3.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/dbunit-2.5.3.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/h2-1.4.196.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/commons-dbcp2-2.1.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/commons-pool2-2.4.2.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/commons-logging-1.2.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/build/classes:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/cobertura-2.1.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-analysis-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-commons-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-tree-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/asm-util-5.0.1.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/commons-lang3-3.3.2.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/hamcrest-core-1.3.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/jaxen-1.1.4.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/jetty-6.1.14.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/jetty-util-6.1.14.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/junit-4.11.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/logback-classic-1.0.13.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/logback-core-1.0.13.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/oro-2.0.8.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/servlet-api-2.5-6.1.14.jar:/Users/grigoriy/Documents/workspace/labortorythirteen/lib/cobertura-2.1.1/lib/slf4j-api-1.7.5.jar:/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant-launcher.jar:/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant.jar:/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant-junit.jar:/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.6 compiled on June 29 2015" />

          <property name="report.junit.dir" value="build/reports/junit" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.8" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="java.io.tmpdir" value="/var/folders/tp/192c_fzd66db2g8bvfn_mks80000gn/T/" />

          <property name="eclipse.pdebuild.home" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.eclipse.pde.build_3.9.200.v20160204-0642/.//" />

          <property name="instrumented.test.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/instrumented/com/nixsolutions/laboratorythirteen/jdbc" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="instrumented.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/instrumented" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="cobertura.ser.file" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/temp/cobertura.ser" />

          <property name="java.ext.dirs" value="/Users/grigoriy/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="basedir" value="/Users/grigoriy/Documents/workspace/labortorythirteen" />

          <property name="report.pmd.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/reports/pmd" />

          <property name="ant.java.version" value="1.8" />

          <property name="ant.core.lib" value="/Applications/Eclipse.app/Contents/Eclipse/plugins/org.apache.ant_1.9.6.v201510161327/lib/ant.jar" />

          <property name="report.cobertura.dir" value="/Users/grigoriy/Documents/workspace/labortorythirteen/build/reports/cobertura" />

          <property name="main.build.dir" value="build/classes" />

          <property name="file.encoding" value="UTF-8" />

          <property name="report.checkstyle.dir" value="build/reports/checkstyle" />

          <property name="java.specification.version" value="1.8" />

          <property name="ant.project.invoked-targets" value="all" />

      </properties>

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="getAllUsersTest" time="0.238" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="getUserByEmailTest" time="0.022" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="getUserByLoginNoSuchLoginTest" time="0.021" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="createUserNullTest" time="0.024" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="getUserByLoginTest" time="0.022" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="updateUserNoSuchUserTest" time="0.022" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="deleteUserNullTest" time="0.033" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="getUserByEmailNullTest" time="0.017" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="updateUserTest" time="0.045" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="updateUserNullTest" time="0.02" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="createUserTest" time="0.031" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="getUserByLoginNullTest" time="0.018" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="getUserByEmailNoSuchEmailTest" time="0.028" />

      <testcase classname="com.nixsolutions.laboratorythirteen.jdbc.JdbcUserDaoImplTest" name="deleteUserTest" time="0.028" />

      <system-out><![CDATA[[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@31206beb, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@3e77a1ed) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@31206beb, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@3e77a1ed) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3ffcd140) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3ffcd140) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3ffcd140) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3ffcd140) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3ffcd140) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3ffcd140) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@3ffcd140) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs2: org.h2.result.LocalResult@147ed70f columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs4: org.h2.result.LocalResult@15b204a1 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs7: org.h2.result.LocalResult@7a4ccb53 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep8: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep9: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep9: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep9: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep9: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn1: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79ad8b2f, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] createDataSet() - start
[DEBUG] getTable(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs16: org.h2.result.LocalResult@163e4e87 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@56de5251, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@56de5251, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs18: org.h2.result.LocalResult@419c5f1a columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] Statement fetch size set to 100
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getSelectStatement(schema=null, metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE from USER order by ID
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: -1], _statement=[stat2]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
[DEBUG] getColumns() - start
[DEBUG] getValue(row=0, columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=3, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=4, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=5, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=6, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=7, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=8, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=1, columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=3, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=4, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=5, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=6, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=7, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=8, resultSet=rs21: org.h2.result.LocalResult@51e5fc98 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=2, columnName=ID) - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@5119fb47, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@7193666c) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@5119fb47, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@7193666c) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@20deea7f) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@20deea7f) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@20deea7f) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@20deea7f) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@20deea7f) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@20deea7f) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@20deea7f) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs23: org.h2.result.LocalResult@43195e57 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs25: org.h2.result.LocalResult@333291e3 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs28: org.h2.result.LocalResult@498d318c columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep23: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep24: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep24: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep24: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep24: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn5: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1ab3a8c8, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@61862a7f, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@441772e) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@61862a7f, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@441772e) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7334aada) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7334aada) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7334aada) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7334aada) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7334aada) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7334aada) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7334aada) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs39: org.h2.result.LocalResult@8dbdac1 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs41: org.h2.result.LocalResult@6e20b53a columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs44: org.h2.result.LocalResult@6aba2b86 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep35: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep36: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep36: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep36: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep36: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn8: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@32eff876, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@44ebcd03, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@694abbdc) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@44ebcd03, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@694abbdc) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2e005c4b) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2e005c4b) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2e005c4b) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2e005c4b) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2e005c4b) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2e005c4b) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2e005c4b) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs54: org.h2.result.LocalResult@7b9a4292 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs56: org.h2.result.LocalResult@4a94ee4 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs59: org.h2.result.LocalResult@294425a7 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep46: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep47: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep47: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep47: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep47: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn11: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@79924b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@6572421, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6b81ce95) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@6572421, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6b81ce95) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2a798d51) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2a798d51) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2a798d51) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2a798d51) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2a798d51) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2a798d51) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@2a798d51) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs68: org.h2.result.LocalResult@2d7275fc columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs70: org.h2.result.LocalResult@399f45b1 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs73: org.h2.result.LocalResult@79e2c065 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep57: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep58: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep58: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep58: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep58: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn14: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@72d1ad2e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@1d2adfbe, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@36902638) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@1d2adfbe, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@36902638) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@223d2c72) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@223d2c72) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@223d2c72) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@223d2c72) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@223d2c72) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@223d2c72) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@223d2c72) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs84: org.h2.result.LocalResult@c8c12ac columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs86: org.h2.result.LocalResult@6adbc9d columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs89: org.h2.result.LocalResult@223191a6 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep69: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep70: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep70: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep70: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep70: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn17: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@1623b78d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[ERROR] IllegalArgumentException.There is no such role to update!
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@1a482e36, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@72967906) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@1a482e36, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@72967906) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5b8dfcc1) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5b8dfcc1) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5b8dfcc1) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5b8dfcc1) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5b8dfcc1) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5b8dfcc1) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@5b8dfcc1) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs99: org.h2.result.LocalResult@f6efaab columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs101: org.h2.result.LocalResult@3c19aaa5 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs104: org.h2.result.LocalResult@38d8f54a columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep80: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep81: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep81: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep81: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep81: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn20: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@74f0ea28, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@3023df74, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@313ac989) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@3023df74, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@313ac989) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4562e04d) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4562e04d) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4562e04d) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4562e04d) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4562e04d) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4562e04d) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4562e04d) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs113: org.h2.result.LocalResult@692f203f columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs115: org.h2.result.LocalResult@48f2bd5b columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs118: org.h2.result.LocalResult@1aafa419 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep91: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep92: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep92: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep92: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep92: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn23: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@4c583ecf, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[ERROR] NullPointerException. There is no such role name!
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@235834f2, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@5656be13) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@235834f2, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@5656be13) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4218d6a3) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4218d6a3) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4218d6a3) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4218d6a3) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4218d6a3) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4218d6a3) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@4218d6a3) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs127: org.h2.result.LocalResult@397fbdb columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs129: org.h2.result.LocalResult@33d512c1 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs132: org.h2.result.LocalResult@5fe94a96 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep101: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep102: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep102: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep102: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep102: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn24: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3590fc5b, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@618b19ad, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@2d3379b4) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@618b19ad, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@2d3379b4) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@30c15d8b) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@30c15d8b) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@30c15d8b) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@30c15d8b) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@30c15d8b) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@30c15d8b) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@30c15d8b) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] createDataSet() - start
[DEBUG] assertEqualsIgnoreCols(expectedDataset=AbstractDataSet[_orderedTableNameMap=null], actualDataset=AbstractDataSet[_orderedTableNameMap=null], tableName=USER, ignoreCols=[id]) - start
[DEBUG] getTable(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTable() - start
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTable(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs142: org.h2.result.LocalResult@408d971b columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6c6cb480, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@6c6cb480, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs144: org.h2.result.LocalResult@3c46e67a columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] Statement fetch size set to 100
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getSelectStatement(schema=null, metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE from USER order by ID
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: -1], _statement=[stat12]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
[DEBUG] getColumns() - start
[DEBUG] getValue(row=0, columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=3, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=4, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=5, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=6, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=7, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=8, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 0) - start
[DEBUG] getValue(row=1, columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=3, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=4, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=5, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=6, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=7, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=8, resultSet=rs147: org.h2.result.LocalResult@292b08d6 columns: 8 rows: 2 pos: 1) - start
[DEBUG] getValue(row=2, columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], ignoreCols=[id]) - start
[DEBUG] excludedColumnsTable(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] accept(tableName=USER, column=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Login) - start
[DEBUG] accept(tableName=USER, column=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Password) - start
[DEBUG] accept(tableName=USER, column=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Email) - start
[DEBUG] accept(tableName=USER, column=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=FirstName) - start
[DEBUG] accept(tableName=USER, column=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LastName) - start
[DEBUG] accept(tableName=USER, column=(Birthday, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Birthday) - start
[DEBUG] accept(tableName=USER, column=(ID_ROLE, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getColumns() - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] accept(tableName=USER, column=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LOGIN) - start
[DEBUG] accept(tableName=USER, column=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=PASSWORD) - start
[DEBUG] accept(tableName=USER, column=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=EMAIL) - start
[DEBUG] accept(tableName=USER, column=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=FIRSTNAME) - start
[DEBUG] accept(tableName=USER, column=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LASTNAME) - start
[DEBUG] accept(tableName=USER, column=(BIRTHDAY, DATE, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=BIRTHDAY) - start
[DEBUG] accept(tableName=USER, column=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], additionalColumnInfo=null) - start
[DEBUG] assertEquals: expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2]
[DEBUG] assertEquals: failureHandler=null
[DEBUG] FailureHandler is null. Using default implementation
[DEBUG] getTableMetaData() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getRowCount() - start
[DEBUG] getRowCount() - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@6025e1b6) - start
[DEBUG] compare(o1=(Password, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(FirstName, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(FirstName, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(LastName, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(LastName, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(ID_ROLE, UNKNOWN, nullableUnknown), o2=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(ID_ROLE, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(ID_ROLE, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@22ff4249) - start
[DEBUG] compare(o1=(PASSWORD, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(LASTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(LASTNAME, VARCHAR, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@6025e1b6, columnsToSearch=[(LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)])
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@22ff4249, columnsToSearch=[(Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)])
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Birthday, UNKNOWN, nullableUnknown), actualColumn=(BIRTHDAY, DATE, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Email, UNKNOWN, nullableUnknown), actualColumn=(EMAIL, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(FirstName, UNKNOWN, nullableUnknown), actualColumn=(FIRSTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(ID_ROLE, UNKNOWN, nullableUnknown), actualColumn=(ID_ROLE, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(LastName, UNKNOWN, nullableUnknown), actualColumn=(LASTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Login, UNKNOWN, nullableUnknown), actualColumn=(LOGIN, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Password, UNKNOWN, nullableUnknown), actualColumn=(PASSWORD, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] compareData(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=2], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@3b69e7d1, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@815b41f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5542c4ed, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@1573f9fc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6150c3ec, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@44c03695, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7e6f74c], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=0, columnName=Birthday) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, columnName=Birthday) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] compare(o1=1992-05-02, o2=1992-05-02) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] compareNonNulls(value1=1992-05-02, value2=1992-05-02) - start
[DEBUG] getValue(row=0, columnName=Email) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, columnName=Email) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] compare(o1=DoeUser@gmail.com, o2=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, columnName=FirstName) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, columnName=FirstName) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] compare(o1=Doe, o2=Doe) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=1, o2=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] compareNonNulls(value1=1, value2=1) - start
[DEBUG] getValue(row=0, columnName=LastName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, columnName=LastName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] compare(o1=DoeSecondName, o2=DoeSecondName) - start
[DEBUG] getValue(row=0, columnName=Login) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, columnName=Login) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] compare(o1=DoeUser, o2=DoeUser) - start
[DEBUG] getValue(row=0, columnName=Password) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, columnName=Password) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] compare(o1=12345, o2=12345) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=1, columnName=Birthday) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, columnName=Birthday) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] compare(o1=1970-12-01, o2=1970-12-01) - start
[DEBUG] typeCast(value=1970-12-01) - start
[DEBUG] typeCast(value=1970-12-01) - start
[DEBUG] compareNonNulls(value1=1970-12-01, value2=1970-12-01) - start
[DEBUG] getValue(row=1, columnName=Email) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, columnName=Email) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] compare(o1=denbars@mail.com, o2=denbars@mail.com) - start
[DEBUG] getValue(row=1, columnName=FirstName) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, columnName=FirstName) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] compare(o1=dfdfb, o2=dfdfb) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=1, o2=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] compareNonNulls(value1=1, value2=1) - start
[DEBUG] getValue(row=1, columnName=LastName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, columnName=LastName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] compare(o1=dbrdrv, o2=dbrdrv) - start
[DEBUG] getValue(row=1, columnName=Login) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, columnName=Login) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] compare(o1=Doe, o2=Doe) - start
[DEBUG] getValue(row=1, columnName=Password) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, columnName=Password) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] compare(o1=maxbars, o2=maxbars) - start
[DEBUG] getRowCount() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@2f4948e4, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@1f2586d6) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@2f4948e4, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@1f2586d6) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@10683d9d) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@10683d9d) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@10683d9d) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@10683d9d) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@10683d9d) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@10683d9d) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@10683d9d) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs148: org.h2.result.LocalResult@f5958c9 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs150: org.h2.result.LocalResult@233795b6 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs153: org.h2.result.LocalResult@1e800aaa columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep118: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep119: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep119: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep119: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep119: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn28: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@77c2494c, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@74e52ef6, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6ed3ccb2) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@74e52ef6, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6ed3ccb2) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1a677343) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1a677343) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1a677343) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1a677343) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1a677343) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1a677343) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@1a677343) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs162: org.h2.result.LocalResult@40005471 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs164: org.h2.result.LocalResult@2cd76f31 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs167: org.h2.result.LocalResult@ba2f4ec columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep129: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep130: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep130: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep130: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep130: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn31: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@3d285d7e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@1ce24091, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@5dda768f) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@1ce24091, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@5dda768f) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7a8c8dcf) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7a8c8dcf) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7a8c8dcf) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7a8c8dcf) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7a8c8dcf) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=3) - start
[DEBUG] addRow(values=3) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7a8c8dcf) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7a8c8dcf) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7a8c8dcf) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]}, _caseSensitiveTableNames=false]
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] createDataSet() - start
[DEBUG] assertEqualsIgnoreCols(expectedDataset=AbstractDataSet[_orderedTableNameMap=null], actualDataset=AbstractDataSet[_orderedTableNameMap=null], tableName=USER, ignoreCols=[id]) - start
[DEBUG] getTable(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTable() - start
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTable(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs176: org.h2.result.LocalResult@65e98b1c columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@61322f9d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@61322f9d, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs178: org.h2.result.LocalResult@6ad82709 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] Statement fetch size set to 100
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getSelectStatement(schema=null, metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE from USER order by ID
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: -1], _statement=[stat15]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
[DEBUG] getColumns() - start
[DEBUG] getValue(row=0, columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 0) - start
[DEBUG] getValue(row=0, columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 0) - start
[DEBUG] getValue(row=0, columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=3, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 0) - start
[DEBUG] getValue(row=0, columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=4, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 0) - start
[DEBUG] getValue(row=0, columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=5, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 0) - start
[DEBUG] getValue(row=0, columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=6, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 0) - start
[DEBUG] getValue(row=0, columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=7, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 0) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=8, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 0) - start
[DEBUG] getValue(row=1, columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 1) - start
[DEBUG] getValue(row=1, columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 1) - start
[DEBUG] getValue(row=1, columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=3, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 1) - start
[DEBUG] getValue(row=1, columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=4, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 1) - start
[DEBUG] getValue(row=1, columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=5, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 1) - start
[DEBUG] getValue(row=1, columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=6, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 1) - start
[DEBUG] getValue(row=1, columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=7, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 1) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=8, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 1) - start
[DEBUG] getValue(row=2, columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 2) - start
[DEBUG] getValue(row=2, columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 2) - start
[DEBUG] getValue(row=2, columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=3, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 2) - start
[DEBUG] getValue(row=2, columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=4, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 2) - start
[DEBUG] getValue(row=2, columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=5, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 2) - start
[DEBUG] getValue(row=2, columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=6, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 2) - start
[DEBUG] getValue(row=2, columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=7, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 2) - start
[DEBUG] getValue(row=2, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=8, resultSet=rs181: org.h2.result.LocalResult@8297b3a columns: 8 rows: 3 pos: 2) - start
[DEBUG] getValue(row=3, columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], ignoreCols=[id]) - start
[DEBUG] excludedColumnsTable(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] accept(tableName=USER, column=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Login) - start
[DEBUG] accept(tableName=USER, column=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Password) - start
[DEBUG] accept(tableName=USER, column=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Email) - start
[DEBUG] accept(tableName=USER, column=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=FirstName) - start
[DEBUG] accept(tableName=USER, column=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LastName) - start
[DEBUG] accept(tableName=USER, column=(Birthday, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Birthday) - start
[DEBUG] accept(tableName=USER, column=(ID_ROLE, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getColumns() - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] accept(tableName=USER, column=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LOGIN) - start
[DEBUG] accept(tableName=USER, column=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=PASSWORD) - start
[DEBUG] accept(tableName=USER, column=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=EMAIL) - start
[DEBUG] accept(tableName=USER, column=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=FIRSTNAME) - start
[DEBUG] accept(tableName=USER, column=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LASTNAME) - start
[DEBUG] accept(tableName=USER, column=(BIRTHDAY, DATE, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=BIRTHDAY) - start
[DEBUG] accept(tableName=USER, column=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], additionalColumnInfo=null) - start
[DEBUG] assertEquals: expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3]
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3]
[DEBUG] assertEquals: failureHandler=null
[DEBUG] FailureHandler is null. Using default implementation
[DEBUG] getTableMetaData() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getRowCount() - start
[DEBUG] getRowCount() - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@4c178a76) - start
[DEBUG] compare(o1=(Password, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(FirstName, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(FirstName, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(LastName, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(LastName, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(ID_ROLE, UNKNOWN, nullableUnknown), o2=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(ID_ROLE, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(ID_ROLE, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@fa4c865) - start
[DEBUG] compare(o1=(PASSWORD, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(LASTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(LASTNAME, VARCHAR, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@4c178a76, columnsToSearch=[(LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)])
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@fa4c865, columnsToSearch=[(Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)])
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Birthday, UNKNOWN, nullableUnknown), actualColumn=(BIRTHDAY, DATE, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Email, UNKNOWN, nullableUnknown), actualColumn=(EMAIL, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(FirstName, UNKNOWN, nullableUnknown), actualColumn=(FIRSTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(ID_ROLE, UNKNOWN, nullableUnknown), actualColumn=(ID_ROLE, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(LastName, UNKNOWN, nullableUnknown), actualColumn=(LASTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Login, UNKNOWN, nullableUnknown), actualColumn=(LOGIN, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Password, UNKNOWN, nullableUnknown), actualColumn=(PASSWORD, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] compareData(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=3], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=3], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@d35dea7, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7770f470, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@5e5d171f, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@24313fcc, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@7d20d0b, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@77f1baf5, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@41a2befb], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=0, columnName=Birthday) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, columnName=Birthday) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] compare(o1=1992-05-02, o2=1992-05-02) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] compareNonNulls(value1=1992-05-02, value2=1992-05-02) - start
[DEBUG] getValue(row=0, columnName=Email) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, columnName=Email) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] compare(o1=DoeUser@gmail.com, o2=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, columnName=FirstName) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, columnName=FirstName) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] compare(o1=Doe, o2=Doe) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=1, o2=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] compareNonNulls(value1=1, value2=1) - start
[DEBUG] getValue(row=0, columnName=LastName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, columnName=LastName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] compare(o1=DoeSecondName, o2=DoeSecondName) - start
[DEBUG] getValue(row=0, columnName=Login) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, columnName=Login) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] compare(o1=DoeUser, o2=DoeUser) - start
[DEBUG] getValue(row=0, columnName=Password) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, columnName=Password) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] compare(o1=12345, o2=12345) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=1, columnName=Birthday) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, columnName=Birthday) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] compare(o1=1992-05-02, o2=1992-05-02) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] compareNonNulls(value1=1992-05-02, value2=1992-05-02) - start
[DEBUG] getValue(row=1, columnName=Email) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, columnName=Email) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] compare(o1=DoeUser@gmail.com, o2=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, columnName=FirstName) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, columnName=FirstName) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] compare(o1=Foo, o2=Foo) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=2, o2=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] compareNonNulls(value1=2, value2=2) - start
[DEBUG] getValue(row=1, columnName=LastName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, columnName=LastName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] compare(o1=DoeSecondName, o2=DoeSecondName) - start
[DEBUG] getValue(row=1, columnName=Login) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, columnName=Login) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] compare(o1=FooUser, o2=FooUser) - start
[DEBUG] getValue(row=1, columnName=Password) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, columnName=Password) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] compare(o1=12345, o2=12345) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=2, columnName=Birthday) - start
[DEBUG] getValue(row=2, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=2, columnName=Birthday) - start
[DEBUG] getValue(row=2, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] compare(o1=1970-12-01, o2=1970-12-01) - start
[DEBUG] typeCast(value=1970-12-01) - start
[DEBUG] typeCast(value=1970-12-01) - start
[DEBUG] compareNonNulls(value1=1970-12-01, value2=1970-12-01) - start
[DEBUG] getValue(row=2, columnName=Email) - start
[DEBUG] getValue(row=2, column=Email) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=2, columnName=Email) - start
[DEBUG] getValue(row=2, column=Email) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] compare(o1=denbars@mail.com, o2=denbars@mail.com) - start
[DEBUG] getValue(row=2, columnName=FirstName) - start
[DEBUG] getValue(row=2, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=2, columnName=FirstName) - start
[DEBUG] getValue(row=2, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] compare(o1=dfdfb, o2=dfdfb) - start
[DEBUG] getValue(row=2, columnName=ID_ROLE) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=2, columnName=ID_ROLE) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] compare(o1=1, o2=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] compareNonNulls(value1=1, value2=1) - start
[DEBUG] getValue(row=2, columnName=LastName) - start
[DEBUG] getValue(row=2, column=LastName) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=2, columnName=LastName) - start
[DEBUG] getValue(row=2, column=LastName) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] compare(o1=dbrdrv, o2=dbrdrv) - start
[DEBUG] getValue(row=2, columnName=Login) - start
[DEBUG] getValue(row=2, column=Login) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=2, columnName=Login) - start
[DEBUG] getValue(row=2, column=Login) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] compare(o1=Doe, o2=Doe) - start
[DEBUG] getValue(row=2, columnName=Password) - start
[DEBUG] getValue(row=2, column=Password) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=2, columnName=Password) - start
[DEBUG] getValue(row=2, column=Password) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=3) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] compare(o1=maxbars, o2=maxbars) - start
[DEBUG] getRowCount() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@131ef10, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@55b0dcab) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@131ef10, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@55b0dcab) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38afe297) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38afe297) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38afe297) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38afe297) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38afe297) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38afe297) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38afe297) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs182: org.h2.result.LocalResult@587e5365 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs184: org.h2.result.LocalResult@22fcf7ab columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs187: org.h2.result.LocalResult@4988d8b8 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep145: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep146: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep146: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep146: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep146: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn35: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@43c1b556, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[ERROR] NullPointerException. There is no such role name!
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@609cd4d8, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@17f7cd29) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@609cd4d8, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@17f7cd29) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7d8704ef) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7d8704ef) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7d8704ef) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7d8704ef) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7d8704ef) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7d8704ef) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7d8704ef) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs196: org.h2.result.LocalResult@75db5df9 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs198: org.h2.result.LocalResult@707194ba columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs201: org.h2.result.LocalResult@45b4c3a9 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep155: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep156: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep156: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep156: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep156: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn36: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@33c911a1, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@192c3f1e, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@26b3fd41) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@192c3f1e, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@26b3fd41) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7494f96a) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7494f96a) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7494f96a) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7494f96a) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7494f96a) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] createTableMetaData(tableName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7494f96a) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=ROLE, object=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] startTable(metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=1) - start
[DEBUG] addRow(values=1) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] startElement(uri=, localName=, qName=ROLE, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@7494f96a) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isLastTable(tableName=ROLE) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=ROLE) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] add(tableName=ROLE, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER, ROLE], _tableMap={ROLE=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]}, _caseSensitiveTableNames=false]
[DEBUG] assertNotNullNorEmpty(propertyName=driverClass, property=org.h2.Driver) - start
[DEBUG] setSetUpOperation(setUpOperation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] setDataSet(dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] onSetup() - start
[DEBUG] executeOperation(operation=org.dbunit.operation.CompositeOperation[_actions=[org.dbunit.operation.DeleteAllOperation@358c99f5, org.dbunit.operation.InsertOperation[_reverseRowOrder=false, super=org.dbunit.operation.InsertOperation@3ee0fea4]]]) - start
[DEBUG] OperationListener is null and will be defaulted.
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] connectionCreated(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null]) - start
[DEBUG] getDataSet() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], , dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=null], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] createDataSet() - start
[DEBUG] createBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getTable() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs211: org.h2.result.LocalResult@4c309d4d columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] isEscaped returns 'false' for tableName=ROLE (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'ROLE' exists in schema 'null' ...
[DEBUG] close(resultSet=rs213: org.h2.result.LocalResult@38102d01 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=ROLE, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: ROLE<=>ROLE column: null<=>NAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=ROLE, columnName=NAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[], columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)]) - start
[DEBUG] update(tableName=ROLE, object=table=ROLE, cols=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], pk=[]) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from ROLE) - start
[DEBUG] Added SQL: delete from ROLE
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs216: org.h2.result.LocalResult@4e3958e7 columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] addBatch(sql=delete from USER) - start
[DEBUG] Added SQL: delete from USER
[DEBUG] executeBatch() - start
[DEBUG] DbUnit SQL: delete from ROLE
[DEBUG] DbUnit SQL: delete from USER
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] execute(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], dataSet=AbstractDataSet[_orderedTableNameMap=null]) - start
[DEBUG] iterator() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationData(metaData=tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], keys=[(ID, BIGINT, noNulls)], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=USER, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser, column=2, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1}) - start
[DEBUG] asString(value=DoeUser) - start
[DEBUG] typeCast(value=DoeUser) - start
[DEBUG] getValue(row=0, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser'}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=0, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345'}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] addValue(value=Doe, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Doe, column=5, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com'}) - start
[DEBUG] asString(value=Doe) - start
[DEBUG] typeCast(value=Doe) - start
[DEBUG] getValue(row=0, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe'}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=0, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName'}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=8, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02'}) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getValue(row=1, column=Login) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=1, column=Password) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=1, column=Email) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=1, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=1, column=LastName) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=1, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=ID) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 1, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=LOGIN) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] addValue(value=FooUser, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=FooUser, column=2, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'DoeUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=FooUser) - start
[DEBUG] typeCast(value=FooUser) - start
[DEBUG] getValue(row=1, column=PASSWORD) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] addValue(value=12345, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=12345, column=3, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=12345) - start
[DEBUG] typeCast(value=12345) - start
[DEBUG] getValue(row=1, column=EMAIL) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeUser@gmail.com, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeUser@gmail.com, column=4, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeUser@gmail.com) - start
[DEBUG] typeCast(value=DoeUser@gmail.com) - start
[DEBUG] getValue(row=1, column=FIRSTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] addValue(value=Foo, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Foo, column=5, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Doe', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=Foo) - start
[DEBUG] typeCast(value=Foo) - start
[DEBUG] getValue(row=1, column=LASTNAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] addValue(value=DoeSecondName, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=DoeSecondName, column=6, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] asString(value=DoeSecondName) - start
[DEBUG] typeCast(value=DoeSecondName) - start
[DEBUG] getValue(row=1, column=BIRTHDAY) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] addValue(value=1992-05-02, dataType=DATE) - start
[DEBUG] setSqlValue(value=1992-05-02, column=7, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=8, statement=prep166: insert into USER (ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE) values (?, ?, ?, ?, ?, ?, ?, ?) {1: 2, 2: 'FooUser', 3: '12345', 4: 'DoeUser@gmail.com', 5: 'Foo', 6: 'DoeSecondName', 7: DATE '1992-05-02', 8: 1}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (ID_ROLE, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] getTable() - start
[DEBUG] isEmpty(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getOperationMetaData(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]], metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] createDataSet() - start
[DEBUG] getTableMetaData(tableName=ROLE) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getIgnoreMapping(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=0) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getOperationData(metaData=tableName=ROLE, columns=[(ID_ROLE, BIGINT, noNulls), (NAME, VARCHAR, nullable)], keys=[], ignoreMapping={}, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=NAME, escapePattern=null) - start
[DEBUG] createPreparedBatchStatement(sql=insert into ROLE (ID_ROLE, NAME) values (?, ?), connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] supportBatchStatement(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] getValue(row=0, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] addValue(value=1, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=1, column=1, statement=prep167: insert into ROLE (ID_ROLE, NAME) values (?, ?)) - start
[DEBUG] typeCast(value=1) - start
[DEBUG] getValue(row=0, column=NAME) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] addValue(value=Admin, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Admin, column=2, statement=prep167: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1}) - start
[DEBUG] asString(value=Admin) - start
[DEBUG] typeCast(value=Admin) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=1) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getValue(row=1, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] addValue(value=2, dataType=BIGINT) - start
[DEBUG] setSqlValue(value=2, column=1, statement=prep167: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 1, 2: 'Admin'}) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] getValue(row=1, column=NAME) - start
[DEBUG] assertValidRowIndex(row=1) - start
[DEBUG] assertValidRowIndex(row=1, rowCount=2) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] getColumnIndex(columnName=NAME) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] addValue(value=Guest, dataType=VARCHAR) - start
[DEBUG] setSqlValue(value=Guest, column=2, statement=prep167: insert into ROLE (ID_ROLE, NAME) values (?, ?) {1: 2, 2: 'Admin'}) - start
[DEBUG] asString(value=Guest) - start
[DEBUG] typeCast(value=Guest) - start
[DEBUG] addBatch() - start
[DEBUG] addBatch() - start
[DEBUG] equalsIgnoreMapping(ignoreMapping={}, table=org.dbunit.dataset.DefaultTable[_metaData=tableName=ROLE, columns=[(ID_ROLE, UNKNOWN, nullableUnknown), (NAME, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=2], row=2) - start
[DEBUG] getValue(row=2, column=ID_ROLE) - start
[DEBUG] assertValidRowIndex(row=2) - start
[DEBUG] assertValidRowIndex(row=2, rowCount=2) - start
[DEBUG] executeBatch() - start
[DEBUG] executeBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] clearBatch() - start
[DEBUG] close() - start
[DEBUG] close() - start
[DEBUG] operationSetUpFinished(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] closeConnection(connection=org.dbunit.database.DatabaseConnection[schema=null, connection=conn39: url=jdbc:h2:mem:test user=SA, super=_databaseConfig=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@ed7f8b4, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}], _dataSet=AbstractDataSet[_orderedTableNameMap=null]]) - start
[DEBUG] close() - start
[DEBUG] Creating FlatXmlDataSet with builder parameters: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] Creating FlatXmlProducer using the properties of this builder: org.dbunit.dataset.xml.FlatXmlDataSetBuilder[dtdMetadata=true, columnSensing=false, caseSensitiveTableNames=false, metaDataSet=null]
[DEBUG] setConsumer(consumer) - start
[DEBUG] produce() - start
[DEBUG] setLexicalHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@58ea606c, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6f45df59) - start
[DEBUG] setDeclHandler(xmlReader=com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser@58ea606c, handler=org.dbunit.dataset.xml.FlatXmlProducer$FlatDtdHandler@6f45df59) - start
[DEBUG] startElement(uri=, localName=, qName=dataset, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38e79ae3) - start
[DEBUG] startDataSet() - start
[DEBUG] startElement(uri=, localName=, qName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38e79ae3) - start
[DEBUG] getLastTableName() - start
[DEBUG] isLastTable(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] createTableMetaData(tableName=USER, attributes=com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$AttributesProxy@38e79ae3) - start
[DEBUG] getColumns(columnNames=[], columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)]) - start
[DEBUG] add(tableName=USER, object=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] startTable(metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[]) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=id_role) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] row(values=2) - start
[DEBUG] addRow(values=2) - start
[DEBUG] endElement(uri=, localName=, qName=USER) - start
[DEBUG] endElement(uri=, localName=, qName=dataset) - start
[DEBUG] getLastTableName() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] endTable() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] endDataSet() - start
[DEBUG] endDataSet() - the final tableMap is: org.dbunit.dataset.OrderedTableNameMap[_tableNames=[USER], _tableMap={USER=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]}, _caseSensitiveTableNames=false]
[DEBUG] getConnection() - start
[DEBUG] assertNotNullNorEmpty(propertyName=connectionUrl, property=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1) - start
[DEBUG] Database connection info: 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] validateSchema(validateStrict=false) - start
[DEBUG] Schema is null. Nothing to validate.
[DEBUG] createDataSet() - start
[DEBUG] assertEqualsIgnoreCols(expectedDataset=AbstractDataSet[_orderedTableNameMap=null], actualDataset=AbstractDataSet[_orderedTableNameMap=null], tableName=USER, ignoreCols=[id]) - start
[DEBUG] getTable(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] createIterator(reversed=false) - start
[DEBUG] orderedValues() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTable() - start
[DEBUG] add(tableName=USER, object=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTable(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] Initializing the data set from the database...
[DEBUG] 
	database product name=H2
	database version=1.4.196 (2017-06-10)
	database major version=1
	database minor version=4
	jdbc driver name=H2 JDBC Driver
	jdbc driver version=1.4.196 (2017-06-10)
	jdbc driver major version=1
	jdbc driver minor version=4

[DEBUG] metadata resultset=rs225: org.h2.result.LocalResult@5f8edcc5 columns: 11 rows: 2 pos: -1
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7b02881e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=ROLE, escapePattern=null) - start
[DEBUG] add(tableName=ROLE, object=null) - start
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getTableName(tableName=ROLE) - start
[DEBUG] getTableName(tableName=ROLE) - end - result=ROLE
[DEBUG] getQualifiedNameIfEnabled(config=org.dbunit.database.DatabaseConfig[, _propertyMap={http://www.dbunit.org/features/qualifiedTableNames=false, http://www.dbunit.org/properties/tableType=[Ljava.lang.String;@27c86f2d, http://www.dbunit.org/properties/batchSize=100, http://www.dbunit.org/properties/statementFactory=org.dbunit.database.statement.PreparedStatementFactory@197d671, http://www.dbunit.org/features/batchedStatements=false, http://www.dbunit.org/features/caseSensitiveTableNames=false, http://www.dbunit.org/features/allowEmptyFields=false, http://www.dbunit.org/properties/datatypeFactory=org.dbunit.dataset.datatype.DefaultDataTypeFactory[_toleratedDeltaMap=org.dbunit.dataset.datatype.ToleratedDeltaMap@402e37bc], http://www.dbunit.org/properties/metadataHandler=org.dbunit.database.DefaultMetadataHandler@7b02881e, http://www.dbunit.org/properties/fetchSize=100, http://www.dbunit.org/properties/resultSetTableFactory=org.dbunit.database.CachedResultSetTableFactory@1df82230, http://www.dbunit.org/features/datatypeWarning=true, http://www.dbunit.org/properties/escapePattern=null}]) - start
[DEBUG] Qualified table names feature is disabled. Returning plain table name
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] add(tableName=USER, object=null) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableMetaData(tableName=USER) - start
[DEBUG] initialize() - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] isEscaped returns 'false' for tableName=USER (dbIdentifierQuoteString=")
[DEBUG] Validating if table 'USER' exists in schema 'null' ...
[DEBUG] close(resultSet=rs227: org.h2.result.LocalResult@1ebd319f columns: 11 rows: 1 pos: 0) - start
[DEBUG] getColumns() - start
[WARN] Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=YES) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LOGIN
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LOGIN) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>PASSWORD
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=PASSWORD) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>EMAIL
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=EMAIL) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>FIRSTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=FIRSTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>LASTNAME
[DEBUG] createDataType(sqlType=12 , sqlTypeName=VARCHAR, tableName=USER, columnName=LASTNAME) - start
[DEBUG] createDataType(sqlType=12, sqlTypeName=VARCHAR) - start
[DEBUG] forSqlType(sqlType=12) - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>BIRTHDAY
[DEBUG] createDataType(sqlType=91 , sqlTypeName=DATE, tableName=USER, columnName=BIRTHDAY) - start
[DEBUG] createDataType(sqlType=91, sqlTypeName=DATE) - start
[DEBUG] forSqlType(sqlType=91) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=1) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] Comparing the following values using caseSensitive=false (searched<=>actual): catalog: null<=>TEST schema: null<=>PUBLIC table: USER<=>USER column: null<=>ID_ROLE
[DEBUG] createDataType(sqlType=-5 , sqlTypeName=BIGINT, tableName=USER, columnName=ID_ROLE) - start
[DEBUG] createDataType(sqlType=-5, sqlTypeName=BIGINT) - start
[DEBUG] forSqlType(sqlType=-5) - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] getSqlType() - start
[DEBUG] nullableValue(nullable=0) - start
[DEBUG] autoIncrementValue(isAutoIncrement=NO) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getPrimaryKeyNames() - start
[DEBUG] getName() - start
[DEBUG] getColumns() - start
[DEBUG] getColumns(columnNames=[ID], columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] getColumn(columnName=ID, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)]) - start
[DEBUG] update(tableName=USER, object=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]) - start
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] getTableName(tableName=USER) - start
[DEBUG] getTableName(tableName=USER) - end - result=USER
[DEBUG] Statement fetch size set to 100
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getSelectStatement(schema=null, metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], escapePattern=null) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LOGIN, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=PASSWORD, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=EMAIL, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=FIRSTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=LASTNAME, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=BIRTHDAY, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID_ROLE, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=USER, escapePattern=null) - start
[DEBUG] getQualifiedName() - start
[DEBUG] getQualifiedName(prefix=null, name=ID, escapePattern=null) - start
[DEBUG] Query: select ID, LOGIN, PASSWORD, EMAIL, FIRSTNAME, LASTNAME, BIRTHDAY, ID_ROLE from USER order by ID
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] addTableRows(table=org.dbunit.database.ForwardOnlyResultSetTable[_metaData=[table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)]], _resultSet=[rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: -1], _statement=[stat19]], org.dbunit.database.ForwardOnlyResultSetTable[_eot=[false], _lastRow=[-1]]) - start
[DEBUG] getColumns() - start
[DEBUG] getValue(row=0, columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumnIndex(columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=1, resultSet=rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: 0) - start
[DEBUG] getValue(row=0, columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=2, resultSet=rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: 0) - start
[DEBUG] getValue(row=0, columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=3, resultSet=rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: 0) - start
[DEBUG] getValue(row=0, columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=4, resultSet=rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: 0) - start
[DEBUG] getValue(row=0, columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=5, resultSet=rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: 0) - start
[DEBUG] getValue(row=0, columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=6, resultSet=rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: 0) - start
[DEBUG] getValue(row=0, columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=7, resultSet=rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: 0) - start
[DEBUG] getValue(row=0, columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] getColumns() - start
[DEBUG] getSqlValue(column=8, resultSet=rs230: org.h2.result.LocalResult@7a675056 columns: 8 rows: 1 pos: 0) - start
[DEBUG] getValue(row=1, columnName=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEqualsIgnoreCols(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], ignoreCols=[id]) - start
[DEBUG] excludedColumnsTable(table=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] accept(tableName=USER, column=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Login) - start
[DEBUG] accept(tableName=USER, column=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Password) - start
[DEBUG] accept(tableName=USER, column=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Email) - start
[DEBUG] accept(tableName=USER, column=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=FirstName) - start
[DEBUG] accept(tableName=USER, column=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LastName) - start
[DEBUG] accept(tableName=USER, column=(Birthday, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=Birthday) - start
[DEBUG] accept(tableName=USER, column=(id_role, UNKNOWN, nullableUnknown)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=id_role) - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] excludedColumnsTable(table=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], columnNames=[id]) - start
[DEBUG] excludeColumn(columnPattern=id) - start
[DEBUG] addPattern(patternName=id) - start
[DEBUG] getColumns() - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] accept(tableName=USER, column=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LOGIN) - start
[DEBUG] accept(tableName=USER, column=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=PASSWORD) - start
[DEBUG] accept(tableName=USER, column=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=EMAIL) - start
[DEBUG] accept(tableName=USER, column=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=FIRSTNAME) - start
[DEBUG] accept(tableName=USER, column=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=LASTNAME) - start
[DEBUG] accept(tableName=USER, column=(BIRTHDAY, DATE, nullable)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=BIRTHDAY) - start
[DEBUG] accept(tableName=USER, column=(ID_ROLE, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID_ROLE) - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] getFilteredColumns(tableName=USER, columns=[(ID, BIGINT, noNulls)], columnFilter=org.dbunit.dataset.filter.DefaultColumnFilter[_includeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[], _acceptedPatterns=[]], _excludeMatcher=org.dbunit.dataset.filter.PatternMatcher[_acceptedNames=[ID], _acceptedPatterns=[]]]) - start
[DEBUG] accept(tableName=USER, column=(ID, BIGINT, noNulls)) - start
[DEBUG] isEmpty() - start
[DEBUG] accept(name=ID) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], additionalColumnInfo=null) - start
[DEBUG] assertEquals: expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1]
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] assertEquals: actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1]
[DEBUG] assertEquals: failureHandler=null
[DEBUG] FailureHandler is null. Using default implementation
[DEBUG] getTableMetaData() - start
[DEBUG] getTableMetaData() - start
[DEBUG] getRowCount() - start
[DEBUG] getRowCount() - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@2898ac89) - start
[DEBUG] compare(o1=(Password, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Password, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Email, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(FirstName, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(FirstName, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(LastName, UNKNOWN, nullableUnknown), o2=(Login, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(LastName, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(Birthday, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(id_role, UNKNOWN, nullableUnknown), o2=(LastName, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(id_role, UNKNOWN, nullableUnknown), o2=(Email, UNKNOWN, nullableUnknown)) - start
[DEBUG] compare(o1=(id_role, UNKNOWN, nullableUnknown), o2=(FirstName, UNKNOWN, nullableUnknown)) - start
[DEBUG] getSortedColumns(metaData=org.dbunit.dataset.FilteredTableMetaData@683dbc2c) - start
[DEBUG] compare(o1=(PASSWORD, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(PASSWORD, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(EMAIL, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(FIRSTNAME, VARCHAR, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(LASTNAME, VARCHAR, nullable), o2=(LOGIN, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(LASTNAME, VARCHAR, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(BIRTHDAY, DATE, nullable), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(LASTNAME, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(EMAIL, VARCHAR, nullable)) - start
[DEBUG] compare(o1=(ID_ROLE, BIGINT, noNulls), o2=(FIRSTNAME, VARCHAR, nullable)) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@2898ac89, columnsToSearch=[(LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)])
[DEBUG] getColumnIndex(columnName=LOGIN) - start
[DEBUG] getColumnIndex(columnName=PASSWORD) - start
[DEBUG] getColumnIndex(columnName=EMAIL) - start
[DEBUG] getColumnIndex(columnName=FIRSTNAME) - start
[DEBUG] getColumnIndex(columnName=LASTNAME) - start
[DEBUG] getColumnIndex(columnName=BIRTHDAY) - start
[DEBUG] getColumnIndex(columnName=ID_ROLE) - start
[DEBUG] findMissingColumnsIn(metaDataToCheck=org.dbunit.dataset.FilteredTableMetaData@683dbc2c, columnsToSearch=[(Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)])
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=id_role) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Birthday, UNKNOWN, nullableUnknown), actualColumn=(BIRTHDAY, DATE, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Email, UNKNOWN, nullableUnknown), actualColumn=(EMAIL, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(FirstName, UNKNOWN, nullableUnknown), actualColumn=(FIRSTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(id_role, UNKNOWN, nullableUnknown), actualColumn=(ID_ROLE, BIGINT, noNulls), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(LastName, UNKNOWN, nullableUnknown), actualColumn=(LASTNAME, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Login, UNKNOWN, nullableUnknown), actualColumn=(LOGIN, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getComparisonDataType(tableName=USER, expectedColumn=(Password, UNKNOWN, nullableUnknown), actualColumn=(PASSWORD, VARCHAR, nullable), failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getColumns() - start
[DEBUG] getPrimaryKeys() - start
[DEBUG] compareData(expectedTable=org.dbunit.dataset.DefaultTable[_metaData=tableName=USER, columns=[(ID, UNKNOWN, nullableUnknown), (Login, UNKNOWN, nullableUnknown), (Password, UNKNOWN, nullableUnknown), (Email, UNKNOWN, nullableUnknown), (FirstName, UNKNOWN, nullableUnknown), (LastName, UNKNOWN, nullableUnknown), (Birthday, UNKNOWN, nullableUnknown), (id_role, UNKNOWN, nullableUnknown)], keys=[], _rowList.size()=1], actualTable=org.dbunit.database.CachedResultSetTable[_metaData=table=USER, cols=[(ID, BIGINT, noNulls), (LOGIN, VARCHAR, nullable), (PASSWORD, VARCHAR, nullable), (EMAIL, VARCHAR, nullable), (FIRSTNAME, VARCHAR, nullable), (LASTNAME, VARCHAR, nullable), (BIRTHDAY, DATE, nullable), (ID_ROLE, BIGINT, noNulls)], pk=[(ID, BIGINT, noNulls)], _rowList.size()=1], comparisonCols=[org.dbunit.assertion.DbUnitAssert$ComparisonColumn@6a2b953e, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@313b2ea6, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@2f465398, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@548e6d58, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@623a8092, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@a1cdc6d, org.dbunit.assertion.DbUnitAssert$ComparisonColumn@175b9425], failureHandler=org.dbunit.assertion.DefaultFailureHandler[_additionalColumnInfo=null]) - start
[DEBUG] getRowCount() - start
[DEBUG] getValue(row=0, columnName=Birthday) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getValue(row=0, columnName=Birthday) - start
[DEBUG] getValue(row=0, column=Birthday) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] getColumnIndex(columnName=Birthday) - start
[DEBUG] compare(o1=1992-05-02, o2=1992-05-02) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] typeCast(value=1992-05-02) - start
[DEBUG] compareNonNulls(value1=1992-05-02, value2=1992-05-02) - start
[DEBUG] getValue(row=0, columnName=Email) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getValue(row=0, columnName=Email) - start
[DEBUG] getValue(row=0, column=Email) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] getColumnIndex(columnName=Email) - start
[DEBUG] compare(o1=DoeUser@gmail.com, o2=DoeUser@gmail.com) - start
[DEBUG] getValue(row=0, columnName=FirstName) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getValue(row=0, columnName=FirstName) - start
[DEBUG] getValue(row=0, column=FirstName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] getColumnIndex(columnName=FirstName) - start
[DEBUG] compare(o1=Foo, o2=Foo) - start
[DEBUG] getValue(row=0, columnName=id_role) - start
[DEBUG] getValue(row=0, column=id_role) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=id_role) - start
[DEBUG] getColumnIndex(columnName=id_role) - start
[DEBUG] getValue(row=0, columnName=id_role) - start
[DEBUG] getValue(row=0, column=id_role) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=id_role) - start
[DEBUG] getColumnIndex(columnName=id_role) - start
[DEBUG] compare(o1=2, o2=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] typeCast(value=2) - start
[DEBUG] compareNonNulls(value1=2, value2=2) - start
[DEBUG] getValue(row=0, columnName=LastName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getValue(row=0, columnName=LastName) - start
[DEBUG] getValue(row=0, column=LastName) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] getColumnIndex(columnName=LastName) - start
[DEBUG] compare(o1=DoeSecondName, o2=DoeSecondName) - start
[DEBUG] getValue(row=0, columnName=Login) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getValue(row=0, columnName=Login) - start
[DEBUG] getValue(row=0, column=Login) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] getColumnIndex(columnName=Login) - start
[DEBUG] compare(o1=FooUser, o2=FooUser) - start
[DEBUG] getValue(row=0, columnName=Password) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getValue(row=0, columnName=Password) - start
[DEBUG] getValue(row=0, column=Password) - start
[DEBUG] assertValidRowIndex(row=0) - start
[DEBUG] assertValidRowIndex(row=0, rowCount=1) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] getColumnIndex(columnName=Password) - start
[DEBUG] compare(o1=12345, o2=12345) - start
[DEBUG] getRowCount() - start
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
</testsuites>
